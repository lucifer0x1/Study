package com.eco.study.leetcode.bitmanipulation;


/**
 * 颠倒给定的 32 位无符号整数的二进制位。
 *
 * 示例 1：
 *
 * 输入: 00000010100101000001111010011100
 * 输出: 0011100101111000 0010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 *
 * 示例 2：
 *
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 *
 * 提示：
 *
 *     请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 *     在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 *
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 *
 */
public class Lesson190 {
    public static void main(String[] args) {
        int n = 0b01111111111111111111111111111101;
        Solution190 solution = new Solution190();
        System.out.println(Integer.toBinaryString(solution.reverseBits(n)));
    }
}

class Solution190 {

    /***
     *分治的策略，我们通过掩码将 32 位整数划分成具有较少位的块，然后通过将美俄个块反转，最后将每个块的结果合并得到最终结果。
     *
     * 在下图中，我们演示如何使用上述思想反转两个位。同样的，这个想法可以应用到比特块上。
     *
     * 0011100101111000 0010100101000000
     *
     * 16
     * 0000000000000000 0011100101111000
     * 0010100101000000 0000000000000000
     * 8
     * 00101001 01000000 00111001 01111000
     *
     * 11111111 00000000 11111111 00000000
     * 00000000 11111111 00000000 11111111
     *
     * JAVA向右移位 最高位是表示正负号， 如果是 符号，移位后高位默认补充1，需要根据移位情况求 与 运算
     */
    public int reverseBits(int n){
        n = ((n & 0b11111111111111110000000000000000) >>16& 0b1111111111111111)| ((n & 0b00000000000000001111111111111111)<<16);
        n = ((n & 0b11111111000000001111111100000000) >>8 & 0b111111111111111111111111) | ((n & 0b00000000111111110000000011111111)<<8);
        n = ((n & 0b11110000111100001111000011110000) >>4 & 0b1111111111111111111111111111) | ((n & 0b00001111000011110000111100001111)<<4);
        n = ((n & 0b11001100110011001100110011001100) >>2 & 0b111111111111111111111111111111) | ((n & 0b00110011001100110011001100110011)<<2);
        n = ((n & 0b10101010101010101010101010101010) >>1 & 0b1111111111111111111111111111111) | ((n & 0b01010101010101010101010101010101)<<1);
        return n;
    }
}