package com.eco.study.leetcode.arrays;

import java.util.HashSet;

/**
 * ClassName Lesson36
 * Description
 * Date 2021/8/25
 * Author wangxiyue.xy@163.com
 *
 * 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 注意：
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 *
 * 示例 1：
 *
 *
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * 示例 2：
 *
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 *
 * 提示：
 *
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 *
 */
public class Lesson36 {

    public static void main(String[] args) {
       char[][]  board = {{'5','3','.','.','7','.','.','.','.'}
                        ,{'6','.','.','1','9','5','.','.','.'}
                        ,{'.','9','8','.','.','.','.','6','.'}
                        ,{'8','.','.','.','6','.','.','.','3'}
                        ,{'4','.','.','8','.','3','.','.','1'}
                        ,{'7','.','.','.','2','.','.','.','6'}
                        ,{'.','6','.','.','.','.','2','8','.'}
                        ,{'.','.','.','4','1','9','.','.','5'}
                        ,{'.','.','.','.','8','.','.','7','9'}};

//        char[][] board = {{'8','3','.','.','7','.','.','.','.'}
//                        ,{'6','.','.','1','9','5','.','.','.'}
//                        ,{'.','9','8','.','.','.','.','6','.'}
//                        ,{'8','.','.','.','6','.','.','.','3'}
//                        ,{'4','.','.','8','.','3','.','.','1'}
//                        ,{'7','.','.','.','2','.','.','.','6'}
//                        ,{'.','6','.','.','.','.','2','8','.'}
//                        ,{'.','.','.','4','1','9','.','.','5'}
//                        ,{'.','.','.','.','8','.','.','7','9'}};
        
//        char[][] board = {{'.','.','4','.','.','.','6','3','.'}
//                         ,{'.','.','.','.','.','.','.','.','.'}
//                         ,{'5','.','.','.','.','.','.','9','.'}
//                         ,{'.','.','.','5','6','.','.','.','.'}
//                         ,{'4','.','3','.','.','.','.','.','1'}
//                         ,{'.','.','.','7','.','.','.','.','.'}
//                         ,{'.','.','.','5','.','.','.','.','.'}
//                         ,{'.','.','.','.','.','.','.','.','.'}
//                         ,{'.','.','.','.','.','.','.','.','.'}};


        Solution36 solution =  new Solution36();
        System.out.println(solution.isValidSudoku(board));
    }
}

class Solution36 {
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < 9; i++) {
            HashSet<String> row  = new HashSet<String>();
            int rowCount =0;
            HashSet<Integer> col = new HashSet<Integer>();
            int colCount =0;
            for (int j = 0; j < 9; j++) {
                //TODO row
                if(board[i][j] != '.'){
                    rowCount ++;
                    row.add(String.valueOf(board[i][j]));
                }
                if(row.size()!=rowCount){
                    return false;
                }
                //TODO col
                if(board[j][i] != '.'){
                    colCount ++;
                    col.add(Integer.valueOf(board[j][i]));
                }
                if(col.size()!=colCount){
                    return false;
                }
            }
        }

        for (int i = 0; i < 9; i=i+3) {
            for (int j = 0; j < 9; j=j+3) {
                HashSet<String> three  = new HashSet<String>();
                int threeCount =0;
                for (int x = 0; x < 3; x++) {
                    for (int y = 0; y < 3; y++) {
                        //TODO 3x3 ku
                        if(board[i+x][j+y] != '.'){
                            threeCount ++;
                            three.add(String.valueOf(board[i+x][j+y]));
                        }
                        if(three.size()!=threeCount){
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
}